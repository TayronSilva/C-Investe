package br.cinveste.controller;

import br.cinveste.model.UserEntity;
import br.cinveste.response.UserResponseDto;
import br.cinveste.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import br.cinveste.record.RegisterDto;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/users")
public class UserController {

    @Autowired
    private UserService userService;

    @PostMapping("/register")
    public ResponseEntity<UserResponseDto> register(@RequestBody RegisterDto data) {
        return ResponseEntity.ok(userService.register(data));
    }

    @GetMapping
    public ResponseEntity<List<UserResponseDto>> listUsers() {
        return ResponseEntity.ok(userService.listUsers());
    }

    @GetMapping("/me")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<UserResponseDto> getCurrentUser(@AuthenticationPrincipal UserEntity currentUser) {
        return ResponseEntity.ok(userService.getCurrentUser(currentUser));
    }
}
package br.cinveste.controller;

import br.cinveste.model.UserEntity;
import br.cinveste.record.ProjectDto;
import br.cinveste.response.ProjectResponseDto;
import br.cinveste.service.ProjectService;
import br.cinveste.enums.UserType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/projects")
public class ProjectController {

    @Autowired
    private ProjectService projectService;

    @PostMapping
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<ProjectResponseDto> createProject(@RequestBody ProjectDto dto,
                                                            @AuthenticationPrincipal UserEntity currentUser) {
        if (currentUser.getTipoUsuario() != UserType.Empreendedor) {
            return ResponseEntity.status(403).build();
        }
        return ResponseEntity.ok(projectService.createProject(dto, currentUser));
    }

    @GetMapping
    public ResponseEntity<List<ProjectResponseDto>> listProjects() {
        return ResponseEntity.ok(projectService.listProjects());
    }

    @GetMapping("/me")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<List<ProjectResponseDto>> listMyProjects(@AuthenticationPrincipal UserEntity currentUser) {
        return ResponseEntity.ok(projectService.listProjectsByUser(currentUser));
    }
}
package br.cinveste.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import br.cinveste.model.UserEntity;
import br.cinveste.enums.UserType;
import br.cinveste.model.EntrepreneurEntity;
import br.cinveste.model.InvestorEntity;
import br.cinveste.record.AuthenticationDto;
import br.cinveste.record.RegisterDto;
import br.cinveste.repository.UserRepository;
import br.cinveste.response.UserResponseDto;
import br.cinveste.repository.EntrepreneurRepository;
import br.cinveste.repository.InvestorRepository;
import br.cinveste.webconfig.TokenService;

@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private EntrepreneurRepository entrepreneurRepository;

    @Autowired
    private InvestorRepository investorRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private TokenService tokenService;

    public List<UserResponseDto> listUsers() {
        return userRepository.findAll().stream()
        .map(this::toResponseDto)
        .toList();
    }

    public UserResponseDto getCurrentUser(UserEntity currentUser) {
        return toResponseDto(currentUser);
    }

    private UserResponseDto toResponseDto(UserEntity user) {
        return new UserResponseDto(
            user.getId(),
            user.getNome(),
            user.getEmail(),
            user.getTipoUsuario().name()
            );
    }

    public Optional<UserEntity> getUserById(Integer id) {
        return userRepository.findById(id);
    }

    public void deleteUser(Integer id) {
        userRepository.deleteById(id);
    }

    public String login(AuthenticationDto data) {
        UsernamePasswordAuthenticationToken usernamePassword =
                new UsernamePasswordAuthenticationToken(data.email(), data.senha());
        Authentication auth = authenticationManager.authenticate(usernamePassword);
        return tokenService.generateToken((UserEntity) auth.getPrincipal());
    }

    @Transactional
    public UserEntity createUser(RegisterDto data) {
        if (userRepository.findByEmail(data.email()).isPresent()) {
            throw new IllegalArgumentException("Email já cadastrado.");
        }

        UserEntity user = new UserEntity(
            null,
            data.nome(),
            data.email(),
            data.telefone(),
            data.data_nascimento(),
            data.cep(),
            data.estado(),
            data.municipio(),
            data.rua(),
            data.numero(),
            data.complemento(),
            passwordEncoder.encode(data.senha()),
            data.typeUsuario()
        );

        user = userRepository.save(user);

        if (data.typeUsuario() == UserType.Investidor) {
            InvestorEntity investor = new InvestorEntity(
                null,
                user,
                data.investorRegisterDto().ocupacao(),
                data.investorRegisterDto().empresa(),
                data.investorRegisterDto().tempo_atuacao(),
                data.investorRegisterDto().renda_mensal(),
                data.investorRegisterDto().valor_investimentos(),
                data.investorRegisterDto().interesses()
            );
            investorRepository.save(investor);
        }

        if (data.typeUsuario() == UserType.Empreendedor) {
            EntrepreneurEntity entrepreneur = new EntrepreneurEntity(
                null,
                user,
                data.entrepreneurRegisterDto().instituicao_ensino(),
                data.entrepreneurRegisterDto().curso(),
                data.entrepreneurRegisterDto().nivel_ensino(),
                data.entrepreneurRegisterDto().ano_expedicao(),
                data.entrepreneurRegisterDto().ano_conclusao()
            );
            entrepreneurRepository.save(entrepreneur);
        }

        return user;
    }
}
package br.cinveste.service;

import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;

import br.cinveste.record.TeamDto;
import br.cinveste.model.TeamEntity;
import br.cinveste.model.UserEntity;
import br.cinveste.enums.UserType;
import br.cinveste.repository.TeamRepository;
import br.cinveste.response.TeamResponseDto;

import java.util.List;

@Service
public class TeamService {

    @Autowired
    private TeamRepository teamRepository;

    public TeamResponseDto createTeam(TeamDto teamDto, UserEntity currentUser) {
        if (currentUser.getTipoUsuario() != UserType.Empreendedor) {
            throw new RuntimeException("Apenas empreendedores podem criar equipes.");
        }

        TeamEntity team = new TeamEntity();
        team.setUser(currentUser);
        team.setLogoUrl(teamDto.logoUrl());
        team.setNome(teamDto.nome());
        team.setDescricao(teamDto.descricao());

        TeamEntity saved = teamRepository.save(team);

        return new TeamResponseDto(
            saved.getIdEquipe(),
            saved.getNome(),
            saved.getDescricao(),
            saved.getLogoUrl(),
            currentUser.getNome()
        );
    }

    public List<TeamResponseDto> listTeams() {
        return teamRepository.findAll().stream()
            .map(team -> new TeamResponseDto(
                team.getIdEquipe(),
                team.getNome(),
                team.getDescricao(),
                team.getLogoUrl(),
                team.getUser().getNome()
            ))
            .toList();
    }
}
package br.cinveste.service;

import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;

import br.cinveste.record.ProjectDto;
import br.cinveste.model.ProjectEntity;
import br.cinveste.model.TeamEntity;
import br.cinveste.model.UserEntity;
import br.cinveste.enums.UserType;
import br.cinveste.repository.ProjectRepository;
import br.cinveste.repository.TeamRepository;
import br.cinveste.response.ProjectResponseDto;

import java.util.List;

@Service
public class ProjectService {

    @Autowired
    private ProjectRepository projectRepository;

    @Autowired
    private TeamRepository teamRepository;

    public ProjectResponseDto createProject(ProjectDto projectDto, UserEntity currentUser) {
        if (currentUser.getTipoUsuario() != UserType.Empreendedor) {
            throw new RuntimeException("Apenas empreendedores podem criar projetos.");
        }

        TeamEntity team = teamRepository.findByUser(currentUser)
                .orElseThrow(() -> new RuntimeException("Usuário não possui equipe"));

        ProjectEntity project = new ProjectEntity();
        project.setNome(projectDto.nome());
        project.setArea(projectDto.area());
        project.setDescricao(projectDto.descricao());
        project.setOrientador(projectDto.orientador());
        project.setVpl(projectDto.vpl());
        project.setRoi(projectDto.roi());
        project.setTir(projectDto.tir());
        project.setPayback(projectDto.payback());
        project.setPaybackDescontado(projectDto.paybackDescontado());
        project.setPeriodo(projectDto.periodo());
        project.setMercadoAlvo(projectDto.mercadoAlvo());
        project.setTeam(team);

        ProjectEntity saved = projectRepository.save(project);

        return new ProjectResponseDto(
            saved.getIdProjeto(),
            saved.getNome(),
            saved.getArea(),
            saved.getDescricao(),
            saved.getOrientador(),
            saved.getVpl(),
            saved.getRoi(),
            saved.getTir(),
            saved.getPayback(),
            saved.getPaybackDescontado(),
            saved.getPeriodo(),
            saved.getMercadoAlvo(),
            team.getNome()
        );
    }

    public List<ProjectResponseDto> listProjects() {
        return projectRepository.findAll().stream()
            .map(p -> new ProjectResponseDto(
                p.getIdProjeto(),
                p.getNome(),
                p.getArea(),
                p.getDescricao(),
                p.getOrientador(),
                p.getVpl(),
                p.getRoi(),
                p.getTir(),
                p.getPayback(),
                p.getPaybackDescontado(),
                p.getPeriodo(),
                p.getMercadoAlvo(),
                p.getTeam().getNome()
            ))
            .toList();
    }

    public List<ProjectResponseDto> listProjectsByUser(UserEntity user) {
        return projectRepository.findAll().stream()
            .filter(p -> p.getTeam().getUser().getId().equals(user.getId()))
            .map(p -> new ProjectResponseDto(
                p.getIdProjeto(),
                p.getNome(),
                p.getArea(),
                p.getDescricao(),
                p.getOrientador(),
                p.getVpl(),
                p.getRoi(),
                p.getTir(),
                p.getPayback(),
                p.getPaybackDescontado(),
                p.getPeriodo(),
                p.getMercadoAlvo(),
                p.getTeam().getNome()
            ))
            .toList();
    }
}
package br.cinveste.record;

public record TeamDto(
    String logoUrl,
    String nome,
    String descricao
) {}
package br.cinveste.record;
import br.cinveste.enums.UserType;
import java.time.LocalDate;

public record RegisterDto(
    String nome,
    String email,
    String telefone,
    String senha,
    LocalDate data_nascimento,
    String cep,
    String estado,
    String rua,
    String numero,
    String municipio,
    String complemento,
    UserType typeUsuario,
    InvestorRegisterDto investorRegisterDto,
    EntrepreneurRegisterDto entrepreneurRegisterDto
) {}
package br.cinveste.record;

public record ProjectDto(
    String nome,
    String area,
    String descricao,
    String orientador,
    Double vpl,
    Double roi,
    Double tir,
    Double payback,
    Double paybackDescontado,
    String periodo,
    String mercadoAlvo
) {}
package br.cinveste.response;

public record UserResponseDto(
    Integer id,
    String nome,
    String email,
    String tipoUsuario
) {}
package br.cinveste.response;

public record TeamResponseDto(
    Integer idEquipe,
    String nome,
    String descricao,
    String logoUrl,
    String usuarioNome
) {}
package br.cinveste.response;

public record ProjectResponseDto(
    Integer idProjeto,
    String nome,
    String area,
    String descricao,
    String orientador,
    Double vpl,
    Double roi,
    Double tir,
    Double payback,
    Double paybackDescontado,
    String periodo,
    String mercadoAlvo,
    String equipeNome
) {}


